name: Create Release

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      description:
        description: 'Release description'
        required: false

permissions:
  contents: write
  
jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get version
      id: get_version
      run: |
        $VERSION = Select-String -Pattern 'version = "\K(.*)(?=")' -Path .\Cargo.toml | % { $_.Matches } | % { $_.Value }
        echo "::set-output name=version::v$VERSION"

    - name: Check if release already exists
      id: check_release
      run: |
        $HTTP_STATUS = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_version.outputs.version }}" -Headers @{"Authorization"="token ${{ secrets.GITHUB_TOKEN }}"} -Method Get -StatusCodeVariable statusCode -ErrorAction SilentlyContinue
        if ($statusCode -ne 404) {
          Write-Host "Release already exists"
          exit 1
        }

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true

    - name: Build project
      run: cargo build --release
      
    - name: Zip files
      run: |
        Compress-Archive -Path .\target\release\satisfactory_factory_planner.exe, .\recipes.json -DestinationPath .\satisfactory_factory_planner.zip

    - name: Get commit messages
      id: get_commits
      run: |
        $COMMITS = git log $(git rev-list --tags --max-count=1)..HEAD --pretty=format:"- %s"
        echo "::set-output name=commits::$COMMITS"

    - name: Create Release and Upload Asset
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ steps.get_version.outputs.version }}
        body: ${{ github.event.inputs.description || steps.get_commits.outputs.commits }}
        tag_name: ${{ steps.get_version.outputs.version }}
        files: |
          satisfactory_factory_planner.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}