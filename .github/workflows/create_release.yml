name: Create Release

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Release description'
        required: true
        
permissions:
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true

    - name: Build project
      run: cargo build --release

    - name: Zip files
      run: |
        zip satisfactory_factory_planner.zip target/release/satisfactory_factory_planner.exe recipes.json

    - name: Get version
      id: get_version
      run: |
        VERSION=$(grep -oP 'version = "\K(.*)(?=")' Cargo.toml)
        echo "::set-output name=version::$VERSION"

    - name: Check if release already exists
      id: check_release
      run: |
        HTTP_STATUS=$(curl --write-out "%{http_code}" --silent --output /dev/null --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_version.outputs.version }}")
        if [[ "$HTTP_STATUS" -ne 404 ]]; then
          echo "Release already exists"
          exit 1
        fi

    - name: Create Draft Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        name: ${{ steps.get_version.outputs.version }}
        body: ${{ github.event.inputs.description }}
        tag_name: ${{ steps.get_version.outputs.version }}
        files: |
          satisfactory_factory_planner.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish Release
      run: |
        curl --silent --show-error --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" --request PATCH --data '{"draft": false}' "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}"
